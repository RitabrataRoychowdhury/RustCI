name: "Canary Deployment Strategy"
description: "Gradual traffic shifting with risk mitigation"

strategy:
  type: "canary"
  config:
    # Canary deployment configuration
    initial_traffic_percentage: 5
    traffic_increment: 10
    increment_interval: 300  # 5 minutes
    max_traffic_percentage: 100
    success_threshold: 95    # Success rate threshold
    error_threshold: 5       # Error rate threshold
    rollback_on_failure: true
    monitoring_duration: 600 # 10 minutes

stages:
  - name: "Pre-deployment"
    jobs:
      - name: "prepare-canary"
        runner: "native"
        steps:
          - name: "setup-monitoring"
            run: |
              echo "üìä Setting up canary monitoring..."
              # Setup monitoring and metrics collection
              # This should integrate with your monitoring system
              
          - name: "deploy-canary-version"
            run: |
              echo "üê§ Deploying canary version..."
              # Deploy canary version alongside production
              # Start with 0% traffic

  - name: "Canary Rollout"
    jobs:
      - name: "gradual-traffic-shift"
        runner: "native"
        steps:
          - name: "start-traffic-shift"
            run: |
              echo "üö¶ Starting gradual traffic shift..."
              CURRENT_TRAFFIC=0
              
              while [ ${CURRENT_TRAFFIC} -lt ${MAX_TRAFFIC_PERCENTAGE} ]; do
                # Increment traffic
                CURRENT_TRAFFIC=$((CURRENT_TRAFFIC + TRAFFIC_INCREMENT))
                if [ ${CURRENT_TRAFFIC} -gt ${MAX_TRAFFIC_PERCENTAGE} ]; then
                  CURRENT_TRAFFIC=${MAX_TRAFFIC_PERCENTAGE}
                fi
                
                echo "üìà Shifting ${CURRENT_TRAFFIC}% traffic to canary..."
                # Update load balancer to send CURRENT_TRAFFIC% to canary
                
                # Monitor for the increment interval
                echo "‚è±Ô∏è Monitoring for ${INCREMENT_INTERVAL} seconds..."
                sleep ${INCREMENT_INTERVAL}
                
                # Check metrics
                echo "üìä Checking canary metrics..."
                SUCCESS_RATE=$(curl -s http://${TARGET_HOST}/api/metrics/success-rate)
                ERROR_RATE=$(curl -s http://${TARGET_HOST}/api/metrics/error-rate)
                
                # Evaluate metrics
                if [ $(echo "${SUCCESS_RATE} < ${SUCCESS_THRESHOLD}" | bc -l) -eq 1 ] || \
                   [ $(echo "${ERROR_RATE} > ${ERROR_THRESHOLD}" | bc -l) -eq 1 ]; then
                  echo "‚ùå Canary metrics failed threshold. Rolling back..."
                  # Rollback logic
                  exit 1
                fi
                
                echo "‚úÖ Canary metrics within threshold. Continuing..."
              done
              
          - name: "finalize-canary"
            run: |
              echo "üéâ Canary deployment successful. Finalizing..."
              # Remove old production version
              # Make canary the new production

  - name: "Post-deployment"
    jobs:
      - name: "cleanup-canary"
        runner: "native"
        steps:
          - name: "remove-old-version"
            run: |
              echo "üßπ Removing old production version..."
              # Clean up old production deployment
              
          - name: "update-monitoring"
            run: |
              echo "üìä Updating monitoring configuration..."
              # Update monitoring to reflect new production version

environment:
  STRATEGY_TYPE: "canary"
  INITIAL_TRAFFIC_PERCENTAGE: 5
  TRAFFIC_INCREMENT: 10
  INCREMENT_INTERVAL: 300
  MAX_TRAFFIC_PERCENTAGE: 100
  SUCCESS_THRESHOLD: 95
  ERROR_THRESHOLD: 5