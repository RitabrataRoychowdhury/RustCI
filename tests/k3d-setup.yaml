name: "K3D Cluster Setup"
description: "Setup k3d cluster for Kubernetes connector testing"

variables:
  CLUSTER_NAME: "rustci-test"
  K3S_VERSION: "v1.28.8-k3s1"

stages:
  - name: "setup-k3d"
    description: "Create k3d cluster for testing"
    steps:
      - name: "check-k3d-installation"
        type: "shell"
        command: |
          if ! command -v k3d >/dev/null 2>&1; then
            echo "k3d not found. Installing k3d..."
            curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
          else
            echo "k3d is already installed"
            k3d version
          fi

      - name: "cleanup-existing-cluster"
        type: "shell"
        command: |
          k3d cluster delete ${CLUSTER_NAME} 2>/dev/null || true

      - name: "create-k3d-cluster"
        type: "shell"
        command: |
          k3d cluster create ${CLUSTER_NAME} \
            --image rancher/k3s:${K3S_VERSION} \
            --port "8080:80@loadbalancer" \
            --port "8443:443@loadbalancer" \
            --agents 2 \
            --wait

      - name: "verify-cluster"
        type: "shell"
        command: |
          kubectl cluster-info
          kubectl get nodes
          kubectl get pods -A

      - name: "install-test-resources"
        type: "shell"
        command: |
          # Install metrics server for testing
          kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
          
          # Patch metrics server for k3d
          kubectl patch deployment metrics-server -n kube-system --type='json' \
            -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "--kubelet-insecure-tls"}]'

  - name: "test-cluster"
    description: "Test k3d cluster functionality"
    steps:
      - name: "deploy-test-pod"
        type: "shell"
        command: |
          kubectl run test-pod --image=nginx:alpine --port=80
          kubectl wait --for=condition=Ready pod/test-pod --timeout=60s

      - name: "test-pod-connectivity"
        type: "shell"
        command: |
          kubectl port-forward pod/test-pod 8081:80 &
          PF_PID=$!
          sleep 3
          
          if curl -f http://localhost:8081; then
            echo "Pod connectivity test passed"
          else
            echo "Pod connectivity test failed"
            kill $PF_PID 2>/dev/null || true
            exit 1
          fi
          
          kill $PF_PID 2>/dev/null || true

      - name: "cleanup-test-pod"
        type: "shell"
        command: |
          kubectl delete pod test-pod

on_failure:
  - name: "cleanup-on-failure"
    type: "shell"
    command: |
      k3d cluster delete ${CLUSTER_NAME} 2>/dev/null || true