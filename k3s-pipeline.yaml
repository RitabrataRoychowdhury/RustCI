name: "RustCI Helm K8s Deploy"
description: "Build and deploy RustCI to Kubernetes (K3s) using Helm on remote machine"

triggers:
  - trigger_type: manual
    config: {}

stages:
  - name: "Build and Deploy"
    steps:
      - name: "fetch-and-build"
        step_type: shell
        config:
          command: |
            echo "üåÄ Cloning RustCI repo into workspace..."
            rm -rf rustci
            git clone https://github.com/RitabrataRoychowdhury/RustCI.git rustci || { echo '‚ùå Git clone failed'; exit 1; }

            echo "üê≥ Building Docker image..."
            cd rustci && docker build -t rustci:latest . || { echo '‚ùå Docker build failed'; exit 1; }

            echo "‚úÖ Docker image built successfully"

      - name: "push-image-to-k3s-containerd"
        step_type: shell
        config:
          command: |
            echo "üì¶ Saving and loading image into containerd on remote K3s node..."
            docker save rustci:latest | sshpass -p "abc123" \
              ssh -o StrictHostKeyChecking=no -p 2223 k8suser@localhost "docker load" || { echo '‚ùå Image transfer via docker load failed'; exit 1; }
            echo "‚úÖ Image loaded into containerd (ctr)"

      - name: "helm-deploy-rustci"
        step_type: shell
        config:
          command: |
            echo "üöÄ Deploying via Helm on remote K3s node..."
            sshpass -p "abc123" ssh -o StrictHostKeyChecking=no -p 2223 k8suser@localhost 'bash -s' <<'EOF'
              set -e
              echo "üìÇ Preparing Helm chart..."
              mkdir -p ~/deployments/rustci/templates

              # Chart.yaml
              cat <<'YAML' > ~/deployments/rustci/Chart.yaml
              apiVersion: v2
              name: rustci
              version: 0.1.0
              description: Helm chart for RustCI
              YAML

              # Deployment.yaml
              cat <<'YAML' > ~/deployments/rustci/templates/deployment.yaml
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: rustci
                namespace: rustci
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: rustci
                template:
                  metadata:
                    labels:
                      app: rustci
                  spec:
                    containers:
                      - name: rustci
                        image: rustci:latest
                        imagePullPolicy: Never
                        ports:
                          - containerPort: 8000
              YAML

              # Service.yaml
              cat <<'YAML' > ~/deployments/rustci/templates/service.yaml
              apiVersion: v1
              kind: Service
              metadata:
                name: rustci
                namespace: rustci
              spec:
                selector:
                  app: rustci
                ports:
                  - name: http
                    protocol: TCP
                    port: 8000
                    targetPort: 8000
              YAML

              echo "‚õµ Deploying with Helm..."
              helm upgrade --install rustci ~/deployments/rustci --namespace rustci --create-namespace \
                --set image.pullPolicy=Never

              echo "‚è≥ Waiting for rollout..."
              kubectl rollout status deployment/rustci -n rustci --timeout=300s
              echo "‚úÖ Helm deployment successful"
            EOF

      - name: "verify-health"
        step_type: shell
        config:
          command: |
            echo "üîç Verifying health via port-forward on remote K3s..."
            sshpass -p "abc123" ssh -o StrictHostKeyChecking=no -p 2223 k8suser@localhost '
              kubectl port-forward svc/rustci 8080:8000 -n rustci >/dev/null 2>&1 &
              sleep 10
              if curl -fs http://localhost:8080/api/healthchecker; then
                echo "‚úÖ Health check passed"
                exit 0
              else
                echo "‚ùå Health check failed"
                exit 1
              fi
            '

environment: {}
timeout: 1800
retry_count: 0