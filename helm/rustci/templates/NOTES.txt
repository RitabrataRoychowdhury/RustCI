1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "rustci.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "rustci.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "rustci.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "{{ include "rustci.selectorLabels" . }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Check the health of your RustCI deployment:
   kubectl get pods -l "{{ include "rustci.selectorLabels" . }}" -n {{ .Release.Namespace }}

3. View logs:
   kubectl logs -f deployment/{{ include "rustci.fullname" . }} -n {{ .Release.Namespace }}

4. Access the API:
   - Health Check: GET /api/healthchecker
   - Pipeline Management: POST /api/ci/pipelines
   - Execution Status: GET /api/ci/executions

5. For CI/CD operations, the following service accounts are available:
   {{- if .Values.cicd.kubernetes.rbac.create }}
   - Kubernetes Connector: {{ .Values.cicd.kubernetes.serviceAccount.name | default "rustci-k8s-connector" }}
   {{- end }}

6. Persistent storage:
   {{- if .Values.persistence.enabled }}
   - Main storage: {{ include "rustci.fullname" . }}-pvc ({{ .Values.persistence.size }})
   {{- end }}
   {{- if .Values.cicd.workspace }}
   - Workspace storage: {{ include "rustci.fullname" . }}-workspace-pvc ({{ .Values.cicd.workspace.size }})
   {{- end }}
   {{- if .Values.cicd.cache }}
   - Cache storage: {{ include "rustci.fullname" . }}-cache-pvc ({{ .Values.cicd.cache.size }})
   {{- end }}

Happy CI/CD with RustCI! ðŸš€