name: "RustCI VPS Production Deployment"
description: "Deploy RustCI to production VPS"
version: "1.0"

triggers:
  - trigger_type: manual
    config: {}

environment:
  VPS_IP: "46.37.122.118"
  VPS_USERNAME: "root"
  VPS_PASSWORD: "Bs4g>^W36(|&D]3"
  REPO_URL: "https://github.com/RitabrataRoychowdhury/RustCI.git"
  MONGODB_URI: "mongodb+srv://ritabrataroychowdhury2002:Physics676@cluster0.uyzku.mongodb.net/dqms?retryWrites=true&w=majority"
  MONGODB_DATABASE: "dqms"
  JWT_SECRET: "404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970"

stages:
  - name: "Pre-deployment"
    description: "Validate VPS connection and setup prerequisites"
    steps:
      - name: "validate-vps-connection"
        step_type: shell
        config:
          command: "echo '🔍 Validating VPS connection...' && sshpass -p 'Bs4g>^W36(|&D]3' ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 root@46.37.122.118 'echo VPS connection successful'"
        timeout: 60
        retry_count: 2

      - name: "check-prerequisites"
        step_type: shell
        config:
          command: "echo '📋 Checking VPS prerequisites...' && sshpass -p 'Bs4g>^W36(|&D]3' ssh -o StrictHostKeyChecking=no root@46.37.122.118 'if ! command -v docker &> /dev/null; then echo Installing Docker...; curl -fsSL https://get.docker.com -o get-docker.sh; sh get-docker.sh; systemctl enable docker; systemctl start docker; fi; mkdir -p /opt/rustci; echo Prerequisites check completed'"
        timeout: 300
        retry_count: 1

  - name: "Build"
    description: "Clone repository and build Docker image"
    steps:
      - name: "clone-and-build"
        step_type: shell
        config:
          command: 'echo ''📥 Cloning RustCI repository...'' && rm -rf /tmp/rustci-build && git clone https://github.com/RitabrataRoychowdhury/RustCI.git /tmp/rustci-build && cd /tmp/rustci-build && echo ''🔨 Building RustCI Docker image...'' && ls -la && if [ -f Dockerfile ]; then docker build -t rustci:latest .; docker tag rustci:latest rustci:production; echo ''Docker image built successfully''; else echo ''No Dockerfile found, creating simple one...''; echo ''FROM ubuntu:22.04'' > Dockerfile; echo ''RUN apt-get update && apt-get install -y curl'' >> Dockerfile; echo ''COPY . /app'' >> Dockerfile; echo ''WORKDIR /app'' >> Dockerfile; echo ''EXPOSE 8000'' >> Dockerfile; echo ''CMD ["echo", "RustCI placeholder container"]'' >> Dockerfile; docker build -t rustci:latest .; docker tag rustci:latest rustci:production; fi'
        timeout: 600
        retry_count: 1

  - name: "Deploy"
    description: "Deploy to VPS"
    steps:
      - name: "transfer-and-deploy"
        step_type: shell
        config:
          command: 'echo ''📦 Transferring Docker image to VPS...'' && docker save rustci:production | gzip | sshpass -p ''Bs4g>^W36(|&D]3'' ssh -o StrictHostKeyChecking=no root@46.37.122.118 ''gunzip | docker load'' && echo ''🚀 Deploying to VPS...'' && sshpass -p ''Bs4g>^W36(|&D]3'' ssh -o StrictHostKeyChecking=no root@46.37.122.118 ''docker stop rustci-production 2>/dev/null || true; docker rm rustci-production 2>/dev/null || true; docker run -d --name rustci-production -p 8080:8000 -e MONGODB_URI="mongodb+srv://ritabrataroychowdhury2002:Physics676@cluster0.uyzku.mongodb.net/dqms?retryWrites=true&w=majority" -e MONGODB_DATABASE="dqms" -e JWT_SECRET="404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970" -e JWT_EXPIRED_IN="1d" -e JWT_SIGNUP_EXPIRED_IN="1h" -e JWT_REFRESH_EXPIRED_IN="7d" -e GITHUB_OAUTH_CLIENT_ID="Ov23li18bhj2ixmL6GlY" -e GITHUB_OAUTH_CLIENT_SECRET="329e1afc2c5009efca526b5e9ae8f3a52bc546bc" -e GITHUB_OAUTH_REDIRECT_URL="http://46.37.122.118:8080/api/sessions/oauth/github/callback" -e CLIENT_ORIGIN="http://46.37.122.118:3000" -e PORT=8000 -e RUST_ENV=production -e RUST_LOG=info -e ENABLE_METRICS=true -v /var/run/docker.sock:/var/run/docker.sock --restart unless-stopped rustci:production; echo Deployment completed'''
        timeout: 300
        retry_count: 1

  - name: "Health Check"
    description: "Verify deployment health"
    steps:
      - name: "health-check"
        step_type: shell
        config:
          command: "echo '🏥 Performing health checks...' && sleep 30 && for i in {1..10}; do if curl -f http://46.37.122.118:8080/api/healthchecker 2>/dev/null; then echo '✅ RustCI health check passed'; break; elif curl -f http://46.37.122.118:8080/health 2>/dev/null; then echo '✅ RustCI health check passed (alternative endpoint)'; break; else echo 'Waiting for RustCI... ($i/10)'; sleep 10; fi; done && echo '✅ RustCI is responding correctly'"
        timeout: 180
        retry_count: 2

  - name: "Post-deployment"
    description: "Cleanup and final verification"
    steps:
      - name: "cleanup-and-verify"
        step_type: shell
        config:
          command: "echo '🧹 Cleaning up resources...' && rm -rf /tmp/rustci-build && docker image prune -f && echo '🎉 Deployment completed successfully!' && echo 'RustCI is available at: http://46.37.122.118:8080' && sshpass -p 'Bs4g>^W36(|&D]3' ssh -o StrictHostKeyChecking=no root@46.37.122.118 'docker ps | grep rustci-production && echo Cleanup completed'"
        timeout: 120
        retry_count: 1

timeout: 1800
retry_count: 1
