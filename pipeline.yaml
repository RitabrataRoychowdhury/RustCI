name: "RustCI VPS Production Deployment"
description: "Deploy RustCI to production VPS with local build and secure transfer"
version: "2.0"

triggers:
  - trigger_type: manual
    config: {}
  - trigger_type: webhook
    config:
      path: "/deploy/production"

environment:
  # VPS Configuration - Use environment variables for security
  VPS_IP: "${VPS_IP:-46.37.122.118}"
  VPS_USERNAME: "${VPS_USERNAME:-root}"
  VPS_PASSWORD: "${VPS_PASSWORD}"
  BUILD_VERSION: "${GITHUB_SHA:-latest}"

  # RustCI Configuration - Use environment variables for sensitive data
  MONGODB_URI: "${MONGODB_URI}"
  MONGODB_DATABASE: "${MONGODB_DATABASE:-dqms}"
  JWT_SECRET: "${JWT_SECRET}"
  JWT_EXPIRED_IN: "${JWT_EXPIRED_IN:-1d}"
  JWT_SIGNUP_EXPIRED_IN: "${JWT_SIGNUP_EXPIRED_IN:-1h}"
  JWT_REFRESH_EXPIRED_IN: "${JWT_REFRESH_EXPIRED_IN:-7d}"
  GITHUB_OAUTH_CLIENT_ID: "${GITHUB_OAUTH_CLIENT_ID}"
  GITHUB_OAUTH_CLIENT_SECRET: "${GITHUB_OAUTH_CLIENT_SECRET}"
  GITHUB_OAUTH_REDIRECT_URL: "${GITHUB_OAUTH_REDIRECT_URL}"
  CLIENT_ORIGIN: "${CLIENT_ORIGIN}"
  PORT: "${PORT:-8000}"
  RUST_ENV: "${RUST_ENV:-production}"
  RUST_LOG: "${RUST_LOG:-info}"
  ENABLE_METRICS: "${ENABLE_METRICS:-true}"

stages:
  - name: "Pre-deployment"
    description: "Validate VPS connection and setup prerequisites"
    steps:
      - name: "validate-environment"
        step_type: shell
        config:
          command: "echo '🔍 Validating environment variables...' && if [ -z '${VPS_PASSWORD}' ]; then echo '❌ VPS_PASSWORD not set'; exit 1; fi && if [ -z '${MONGODB_URI}' ]; then echo '❌ MONGODB_URI not set'; exit 1; fi && if [ -z '${JWT_SECRET}' ]; then echo '❌ JWT_SECRET not set'; exit 1; fi && echo '✅ Environment validation passed'"
        timeout: 30
        retry_count: 1
        on_failure: "fail"

      - name: "validate-vps-connection"
        step_type: shell
        config:
          command: 'echo ''🔍 Testing VPS connection...'' && sshpass -p "${VPS_PASSWORD}" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 "${VPS_USERNAME}@${VPS_IP}" "echo ''VPS connection successful''"'
        timeout: 60
        retry_count: 3
        on_failure: "fail"

      - name: "check-prerequisites"
        step_type: shell
        config:
          command: 'echo ''📋 Checking VPS prerequisites...'' && sshpass -p "${VPS_PASSWORD}" ssh -o StrictHostKeyChecking=no "${VPS_USERNAME}@${VPS_IP}" ''if ! command -v docker &> /dev/null; then echo Installing Docker...; curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh && systemctl enable docker && systemctl start docker; fi; if ! command -v sshpass &> /dev/null; then apt-get update && apt-get install -y sshpass; fi; mkdir -p /opt/rustci/{current,backups}; echo Prerequisites check completed'''
        timeout: 300
        retry_count: 2
        on_failure: "fail"

  - name: "Build"
    description: "Clone repository and build Docker image locally"
    steps:
      - name: "clone-repository"
        step_type: shell
        config:
          command: "echo '� Caloning RustCI repository...' && if [ -d '.git' ]; then echo 'Repository already exists, pulling latest changes...'; git pull origin main || git pull origin master; else echo 'Cloning repository...'; git clone https://github.com/RitabrataRoychowdhury/RustCI.git . || (echo 'Failed to clone, trying current directory...'; ls -la); fi && echo '✅ Repository ready'"
        timeout: 120
        retry_count: 2
        on_failure: "fail"

      - name: "validate-workspace"
        step_type: shell
        config:
          command: "echo '🔍 Validating workspace...' && if [ ! -f Dockerfile ]; then echo '❌ Dockerfile not found in workspace'; exit 1; fi && if [ ! -f Cargo.toml ]; then echo '❌ Cargo.toml not found in workspace'; exit 1; fi && echo '✅ Workspace validation passed'"
        timeout: 30
        retry_count: 1
        on_failure: "fail"

      - name: "build-rustci-image"
        step_type: shell
        config:
          command: "echo '🔨 Building RustCI Docker image locally...' && docker build -t rustci:${BUILD_VERSION} -f Dockerfile . && docker tag rustci:${BUILD_VERSION} rustci:production && echo '✅ RustCI Docker image built successfully' && docker images | grep rustci"
        timeout: 900
        retry_count: 2
        on_failure: "fail"

      - name: "validate-image"
        step_type: shell
        config:
          command: "echo '🧪 Validating Docker image...' && docker run --rm --name rustci-test -d -p 8001:8000 -e RUST_LOG=debug rustci:production && sleep 15 && if docker ps | grep rustci-test; then echo '✅ Container started successfully'; if curl -f http://localhost:8001/health 2>/dev/null || curl -f http://localhost:8001/api/healthchecker 2>/dev/null; then echo '✅ Health endpoints responding'; else echo '⚠️ Health endpoints not responding yet (may be normal during startup)'; fi; docker stop rustci-test; else echo '❌ Container failed to start'; docker logs rustci-test 2>/dev/null || true; exit 1; fi"
        timeout: 180
        retry_count: 2
        on_failure: "fail"

  - name: "Deploy"
    description: "Deploy to VPS"
    steps:
      - name: "backup-current-deployment"
        step_type: shell
        config:
          command: 'echo ''💾 Creating backup of current deployment...'' && sshpass -p "${VPS_PASSWORD}" ssh -o StrictHostKeyChecking=no "${VPS_USERNAME}@${VPS_IP}" ''if docker ps | grep rustci-production; then docker commit rustci-production rustci:backup-$(date +%Y%m%d-%H%M%S) && echo Backup created; else echo No current deployment to backup; fi'''
        timeout: 120
        retry_count: 2
        on_failure: "continue"

      - name: "transfer-image"
        step_type: shell
        config:
          command: 'echo ''📦 Transferring Docker image to VPS...'' && docker save rustci:production | gzip | sshpass -p "${VPS_PASSWORD}" ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=60 "${VPS_USERNAME}@${VPS_IP}" "gunzip | docker load" && echo ''✅ Image transfer completed'''
        timeout: 600
        retry_count: 3
        on_failure: "fail"

      - name: "stop-existing-container"
        step_type: shell
        config:
          command: 'echo ''🛑 Stopping existing RustCI container...'' && sshpass -p "${VPS_PASSWORD}" ssh -o StrictHostKeyChecking=no "${VPS_USERNAME}@${VPS_IP}" ''docker stop rustci-production 2>/dev/null || true; docker rm rustci-production 2>/dev/null || true'''
        timeout: 60
        retry_count: 2
        on_failure: "continue"

      - name: "deploy-rustci"
        step_type: shell
        config:
          command: 'echo ''🚀 Deploying RustCI to VPS...'' && sshpass -p "${VPS_PASSWORD}" ssh -o StrictHostKeyChecking=no "${VPS_USERNAME}@${VPS_IP}" "docker run -d --name rustci-production -p 8080:8000 -e MONGODB_URI=''${MONGODB_URI}'' -e MONGODB_DATABASE=''${MONGODB_DATABASE}'' -e JWT_SECRET=''${JWT_SECRET}'' -e JWT_EXPIRED_IN=''${JWT_EXPIRED_IN}'' -e JWT_SIGNUP_EXPIRED_IN=''${JWT_SIGNUP_EXPIRED_IN}'' -e JWT_REFRESH_EXPIRED_IN=''${JWT_REFRESH_EXPIRED_IN}'' -e GITHUB_OAUTH_CLIENT_ID=''${GITHUB_OAUTH_CLIENT_ID}'' -e GITHUB_OAUTH_CLIENT_SECRET=''${GITHUB_OAUTH_CLIENT_SECRET}'' -e GITHUB_OAUTH_REDIRECT_URL=''${GITHUB_OAUTH_REDIRECT_URL}'' -e CLIENT_ORIGIN=''${CLIENT_ORIGIN}'' -e PORT=${PORT} -e RUST_ENV=${RUST_ENV} -e RUST_LOG=${RUST_LOG} -e ENABLE_METRICS=${ENABLE_METRICS} -v /var/run/docker.sock:/var/run/docker.sock --restart unless-stopped rustci:production && echo ''RustCI deployment completed''"'
        timeout: 180
        retry_count: 2
        on_failure: "fail"

  - name: "Health Check"
    description: "Verify deployment health"
    steps:
      - name: "wait-for-startup"
        step_type: shell
        config:
          command: "echo '⏳ Waiting for RustCI to start...' && sleep 45 && echo '✅ Initial startup wait completed'"
        timeout: 60
        retry_count: 1
        on_failure: "continue"

      - name: "health-check-primary"
        step_type: shell
        config:
          command: "echo '🏥 Testing primary health endpoint...' && for i in {1..15}; do if curl -f -s http://${VPS_IP}:8080/api/healthchecker 2>/dev/null; then echo '✅ Primary health endpoint (/api/healthchecker) responding'; exit 0; else echo 'Attempt $i/15: Primary health endpoint not ready...'; sleep 10; fi; done && echo '❌ Primary health endpoint failed after 15 attempts'"
        timeout: 180
        retry_count: 1
        on_failure: "continue"

      - name: "health-check-fallback"
        step_type: shell
        config:
          command: "echo '🏥 Testing fallback health endpoint...' && for i in {1..10}; do if curl -f -s http://${VPS_IP}:8080/health 2>/dev/null; then echo '✅ Fallback health endpoint (/health) responding'; exit 0; else echo 'Attempt $i/10: Fallback health endpoint not ready...'; sleep 10; fi; done && echo '❌ Fallback health endpoint failed after 10 attempts'"
        timeout: 120
        retry_count: 1
        on_failure: "continue"

      - name: "deployment-status-check"
        step_type: shell
        config:
          command: 'echo ''📊 Checking deployment status...'' && sshpass -p "${VPS_PASSWORD}" ssh -o StrictHostKeyChecking=no "${VPS_USERNAME}@${VPS_IP}" ''if docker ps | grep rustci-production; then echo RustCI container is running; docker logs --tail 20 rustci-production; else echo RustCI container not found; docker ps -a | grep rustci || echo No rustci containers found; exit 1; fi'''
        timeout: 60
        retry_count: 1
        on_failure: "fail"

  - name: "Post-deployment"
    description: "Cleanup and final verification"
    steps:
      - name: "final-health-verification"
        step_type: shell
        config:
          command: "echo '🔍 Final health verification...' && if curl -f -s http://${VPS_IP}:8080/api/healthchecker 2>/dev/null || curl -f -s http://${VPS_IP}:8080/health 2>/dev/null; then echo '✅ Final health check passed'; else echo '❌ Final health check failed - deployment may need rollback'; exit 1; fi"
        timeout: 60
        retry_count: 3
        on_failure: "fail"

      - name: "cleanup-and-verify"
        step_type: shell
        config:
          command: 'docker image prune -f && echo ''🎉 Deployment completed successfully!'' && echo ''RustCI is available at: http://${VPS_IP}:8080'' && echo ''Health endpoints:'' && echo ''  - http://${VPS_IP}:8080/api/healthchecker'' && echo ''  - http://${VPS_IP}:8080/health'' && sshpass -p "${VPS_PASSWORD}" ssh -o StrictHostKeyChecking=no "${VPS_USERNAME}@${VPS_IP}" ''docker ps | grep rustci-production && echo Cleanup completed - RustCI is running'''
        timeout: 120
        retry_count: 1
        on_failure: "continue"

# Rollback configuration for deployment failures
rollback:
  enabled: true
  steps:
    - name: "rollback-deployment"
      step_type: shell
      config:
        command: "echo '🔄 Rolling back deployment...' && sshpass -p \"${VPS_PASSWORD}\" ssh -o StrictHostKeyChecking=no \"${VPS_USERNAME}@${VPS_IP}\" 'BACKUP_IMAGE=$(docker images | grep rustci:backup | head -1 | awk \"{print \\$1:\\$2}\"); if [ ! -z \"$BACKUP_IMAGE\" ]; then echo Rolling back to $BACKUP_IMAGE; docker stop rustci-production 2>/dev/null || true; docker rm rustci-production 2>/dev/null || true; docker run -d --name rustci-production -p 8080:8000 --restart unless-stopped $BACKUP_IMAGE && echo Rollback completed; else echo No backup image found for rollback; fi'"
      timeout: 180

timeout: 1800
retry_count: 1
