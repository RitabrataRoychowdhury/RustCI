name: "Database Migration"
description: "Run database migrations and data updates"
triggers:
  - trigger_type: manual
    config: {}

stages:
  - name: "Migration"
    steps:
      - name: "backup-database"
        step_type: shell
        config:
          command: |
            mongodump --uri="${MONGODB_URI}" --db="${MONGODB_DATABASE}" \
            --out="./backup/$(date +%Y%m%d_%H%M%S)"
            
      - name: "validate-migration-scripts"
        step_type: shell
        config:
          command: |
            find migrations/ -name "*.js" -exec node -c {} \; && \
            echo "All migration scripts are valid"
            
      - name: "run-migrations"
        step_type: shell
        config:
          deployment_type: custom
          command: |
            for migration in migrations/*.js; do
              echo "Running migration: $migration"
              mongo "${MONGODB_URI}/${MONGODB_DATABASE}" "$migration"
            done
            
      - name: "verify-migration"
        step_type: shell
        config:
          command: |
            mongo "${MONGODB_URI}/${MONGODB_DATABASE}" --eval "
              db.migration_log.find().sort({timestamp: -1}).limit(5).pretty()
            "
            
      - name: "update-schema-version"
        step_type: shell
        config:
          command: |
            mongo "${MONGODB_URI}/${MONGODB_DATABASE}" --eval "
              db.schema_version.updateOne(
                {},
                { \$set: { version: '${SCHEMA_VERSION}', updated_at: new Date() } },
                { upsert: true }
              )
            "
            
      - name: "run-data-validation"
        step_type: shell
        config:
          command: |
            cargo run --bin validate-data -- --database="${MONGODB_DATABASE}"

environment:
  SCHEMA_VERSION: "1.0.0"
timeout: 1800
retry_count: 0