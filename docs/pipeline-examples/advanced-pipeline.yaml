# Advanced Pipeline Example
# Full power - matrix strategies, includes, variables, caching
# Sophisticated CI/CD workflow with all advanced features

name: "Advanced Multi-Matrix Pipeline"
description: "Advanced pipeline with matrix strategies, includes, variables, and caching"
type: advanced

# Repository information
repo: https://github.com/user/complex-project.git
branch: main

# Global variables
variables:
  RUST_VERSION: "1.70"
  NODE_VERSION: "18"
  DOCKER_REGISTRY: "registry.complex.com"
  PROJECT_NAME: "complex-project"
  CACHE_VERSION: "v1"

# Include external pipeline configurations
include:
  - local: ".ci/security-checks.yml"
  - remote: "https://gitlab.com/templates/rust-template.yml"
  - template: "docker-build-template"

# Global cache configuration
cache:
  paths:
    - "target/"
    - "~/.cargo/registry/"
    - "~/.cargo/git/"
    - "node_modules/"
  key: "${PROJECT_NAME}-${CACHE_VERSION}-${RUST_VERSION}"
  policy: "pull-push"

# Define stages
stages: ["prepare", "build", "test", "security", "package", "deploy", "verify"]

# Jobs with matrix strategies
jobs:
  # Prepare stage
  setup:
    stage: prepare
    script: |
      echo "Setting up build environment..."
      echo "Rust version: ${RUST_VERSION}"
      echo "Node version: ${NODE_VERSION}"
      rustup install ${RUST_VERSION}
      rustup default ${RUST_VERSION}
      
  # Build stage with matrix
  build_rust:
    stage: build
    matrix:
      rust: ["1.70", "1.71", "1.72"]
      target: ["x86_64-unknown-linux-gnu", "aarch64-unknown-linux-gnu"]
    script: |
      echo "Building for Rust ${rust} on ${target}..."
      rustup target add ${target}
      cargo build --release --target ${target}
    cache:
      paths: ["target/"]
      key: "build-${rust}-${target}-${CACHE_VERSION}"
      
  build_frontend:
    stage: build
    matrix:
      node: ["16", "18", "20"]
    script: |
      echo "Building frontend with Node ${node}..."
      nvm use ${node}
      npm ci
      npm run build
    cache:
      paths: ["node_modules/", "dist/"]
      key: "frontend-${node}-${CACHE_VERSION}"
      
  # Test stage with comprehensive matrix
  unit_tests:
    stage: test
    matrix:
      rust: ["1.70", "1.71"]
      features: ["default", "full", "minimal"]
    script: |
      echo "Running unit tests with Rust ${rust} and features ${features}..."
      cargo test --features ${features}
      
  integration_tests:
    stage: test
    matrix:
      database: ["postgres", "mysql", "sqlite"]
      rust: ["1.70"]
    script: |
      echo "Running integration tests with ${database}..."
      export DATABASE_URL="${database}://localhost/test"
      cargo test --test integration -- --test-threads=1
      
  browser_tests:
    stage: test
    matrix:
      browser: ["chrome", "firefox", "safari"]
      resolution: ["1920x1080", "1366x768", "mobile"]
    script: |
      echo "Running browser tests on ${browser} at ${resolution}..."
      export BROWSER=${browser}
      export RESOLUTION=${resolution}
      npm run test:e2e
      
  # Security stage
  security_audit:
    stage: security
    script: |
      echo "Running comprehensive security audit..."
      cargo audit
      npm audit
      
  container_scan:
    stage: security
    matrix:
      scanner: ["trivy", "clair", "snyk"]
    script: |
      echo "Scanning with ${scanner}..."
      case ${scanner} in
        trivy) trivy fs . ;;
        clair) clair-scanner --ip localhost . ;;
        snyk) snyk test ;;
      esac
      
  # Package stage with multi-platform builds
  package_binaries:
    stage: package
    matrix:
      platform: ["linux-amd64", "linux-arm64", "darwin-amd64", "windows-amd64"]
    script: |
      echo "Packaging for ${platform}..."
      case ${platform} in
        linux-amd64) 
          cargo build --release --target x86_64-unknown-linux-gnu
          tar -czf ${PROJECT_NAME}-${platform}.tar.gz -C target/x86_64-unknown-linux-gnu/release ${PROJECT_NAME}
          ;;
        linux-arm64)
          cargo build --release --target aarch64-unknown-linux-gnu
          tar -czf ${PROJECT_NAME}-${platform}.tar.gz -C target/aarch64-unknown-linux-gnu/release ${PROJECT_NAME}
          ;;
        darwin-amd64)
          cargo build --release --target x86_64-apple-darwin
          tar -czf ${PROJECT_NAME}-${platform}.tar.gz -C target/x86_64-apple-darwin/release ${PROJECT_NAME}
          ;;
        windows-amd64)
          cargo build --release --target x86_64-pc-windows-gnu
          zip ${PROJECT_NAME}-${platform}.zip target/x86_64-pc-windows-gnu/release/${PROJECT_NAME}.exe
          ;;
      esac
      
  package_containers:
    stage: package
    matrix:
      arch: ["amd64", "arm64"]
      variant: ["alpine", "debian", "distroless"]
    script: |
      echo "Building container for ${arch} with ${variant} base..."
      docker buildx build \
        --platform linux/${arch} \
        --build-arg BASE_IMAGE=${variant} \
        --build-arg RUST_VERSION=${RUST_VERSION} \
        -t ${DOCKER_REGISTRY}/${PROJECT_NAME}:${arch}-${variant} \
        --push .
        
  # Deploy stage with environment matrix
  deploy_environments:
    stage: deploy
    matrix:
      environment: ["staging", "production"]
      region: ["us-east-1", "eu-west-1", "ap-southeast-1"]
    script: |
      echo "Deploying to ${environment} in ${region}..."
      export ENVIRONMENT=${environment}
      export AWS_REGION=${region}
      
      # Deploy using Kubernetes
      kubectl config use-context ${environment}-${region}
      helm upgrade --install ${PROJECT_NAME} ./helm-chart \
        --set image.tag=${BUILD_VERSION} \
        --set environment=${environment} \
        --set region=${region} \
        --namespace ${environment}
        
  # Verify stage with comprehensive testing
  verify_deployment:
    stage: verify
    matrix:
      environment: ["staging", "production"]
      test_type: ["smoke", "load", "security"]
    script: |
      echo "Running ${test_type} tests in ${environment}..."
      export BASE_URL="https://${environment}.complex.com"
      
      case ${test_type} in
        smoke)
          curl -f ${BASE_URL}/health
          curl -f ${BASE_URL}/api/status
          ;;
        load)
          k6 run --env BASE_URL=${BASE_URL} load-test.js
          ;;
        security)
          zap-baseline.py -t ${BASE_URL}
          ;;
      esac

# Triggers with advanced configuration
triggers:
  - trigger_type: manual
    config: {}
  - trigger_type: git_push
    config:
      repository: "user/complex-project"
      branch_patterns: ["main", "release/*", "hotfix/*"]
  - trigger_type: pull_request
    config:
      repository: "user/complex-project"
      events: ["opened", "synchronize", "reopened"]
  - trigger_type: schedule
    config:
      cron_expression: "0 2 * * 1-5"  # Weekdays at 2 AM

# Environment variables with matrix support
environment:
  RUST_BACKTRACE: "full"
  CARGO_TERM_COLOR: "always"
  BUILD_VERSION: "${GITHUB_SHA:-v1.0.0}"
  CI: "true"
  DOCKER_BUILDKIT: "1"
  BUILDX_PLATFORMS: "linux/amd64,linux/arm64"

# Global settings
timeout: 7200  # 2 hours
retry_count: 2

# Advanced notifications
notifications:
  on_success:
    - target_type: slack
      config:
        slack_channel: "#deployments"
        slack_token: "${SLACK_TOKEN}"
    - target_type: webhook
      config:
        webhook_url: "https://monitoring.complex.com/webhook/success"
  on_failure:
    - target_type: slack
      config:
        slack_channel: "#alerts"
        slack_token: "${SLACK_TOKEN}"
    - target_type: email
      config:
        email: "oncall@complex.com"
    - target_type: webhook
      config:
        webhook_url: "https://monitoring.complex.com/webhook/failure"
  on_start:
    - target_type: github
      config:
        github_status: true