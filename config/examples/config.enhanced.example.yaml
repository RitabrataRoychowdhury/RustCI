# Enhanced RustCI Configuration Example
# This file demonstrates the comprehensive configuration options available

server:
  host: "0.0.0.0"
  port: 8000
  workers: 4
  max_connections: 1000
  request_timeout_seconds: 30
  graceful_shutdown_timeout_seconds: 30
  # TLS configuration (optional)
  # tls:
  #   cert_path: "/path/to/cert.pem"
  #   key_path: "/path/to/key.pem"
  #   require_client_cert: false

database:
  mongodb_uri: "mongodb://localhost:27017"
  database_name: "rustci"
  connection_pool_size: 10
  connection_timeout_seconds: 10
  query_timeout_seconds: 30
  retry_attempts: 3
  enable_ssl: false

security:
  jwt:
    secret: "your-super-secure-jwt-secret-key-at-least-32-characters-long"
    expires_in_seconds: 3600  # 1 hour
    refresh_expires_in_seconds: 86400  # 24 hours
    issuer: "rustci"
    audience: "rustci-api"
    algorithm: "HS256"

  oauth:
    github:
      client_id: "your-github-oauth-client-id"
      client_secret: "your-github-oauth-client-secret"
      redirect_url: "http://localhost:8000/api/sessions/oauth/github/callback"
      scopes:
        - "user:email"
        - "repo"

  encryption:
    key: "base64-encoded-32-byte-encryption-key"  # Generate with: openssl rand -base64 32
    algorithm: "AES-256-GCM"

  rate_limiting:
    requests_per_minute: 60
    burst_size: 10
    enable_per_user_limits: true
    whitelist_ips:
      - "127.0.0.1"
      - "::1"

  cors:
    allowed_origins:
      - "http://localhost:3000"
      - "https://your-frontend-domain.com"
    allowed_methods:
      - "GET"
      - "POST"
      - "PUT"
      - "DELETE"
      - "OPTIONS"
    allowed_headers:
      - "Content-Type"
      - "Authorization"
      - "X-Requested-With"
    allow_credentials: true
    max_age_seconds: 3600

  rbac:
    enabled: true
    default_role: "Viewer"
    role_hierarchy:
      Admin:
        - "Developer"
        - "Viewer"
      Developer:
        - "Viewer"
    permission_cache_ttl_seconds: 300

  audit:
    enabled: true
    log_all_requests: false
    log_failed_auth: true
    retention_days: 90
    sensitive_fields:
      - "password"
      - "token"
      - "secret"
      - "key"

  session:
    timeout_minutes: 60
    max_concurrent_sessions: 5
    secure_cookies: false  # Set to true in production with HTTPS
    same_site: "lax"  # "strict", "lax", or "none"

observability:
  logging:
    level: "info"  # "trace", "debug", "info", "warn", "error"
    format: "pretty"  # "json" or "pretty"
    output: "stdout"  # "stdout", "stderr", or file path
    enable_file_rotation: false
    max_file_size_mb: 100
    max_files: 10

  metrics:
    enabled: true
    endpoint: "/metrics"
    collection_interval_seconds: 60
    export_timeout_seconds: 10
    custom_metrics:
      pipeline_duration: "histogram"
      active_connections: "gauge"

  tracing:
    enabled: false
    endpoint: "http://localhost:14268/api/traces"  # Jaeger endpoint
    service_name: "rustci"
    service_version: "0.1.0"
    sample_rate: 0.1  # 10% sampling
    export_timeout_seconds: 10

ci:
  max_concurrent_pipelines: 10
  pipeline_timeout_seconds: 3600  # 1 hour
  workspace_cleanup_interval_seconds: 300  # 5 minutes
  default_executor: "docker"
  
  executors:
    docker:
      enabled: true
      max_concurrent_jobs: 5
      resource_limits:
        cpu_cores: 2.0
        memory_mb: 2048
        disk_mb: 10240
        network_bandwidth_mbps: null
      timeout_seconds: 1800  # 30 minutes
      retry_attempts: 2
      config:
        docker_host: "unix:///var/run/docker.sock"
        network_mode: "bridge"
        
    kubernetes:
      enabled: false
      max_concurrent_jobs: 10
      resource_limits:
        cpu_cores: 4.0
        memory_mb: 4096
        disk_mb: 20480
      timeout_seconds: 3600  # 1 hour
      retry_attempts: 3
      config:
        namespace: "rustci"
        service_account: "rustci-runner"

external_services:
  github:
    api_url: "https://api.github.com"
    timeout_seconds: 30
    retry_attempts: 3
    rate_limit_per_hour: 5000

  docker_registry:
    url: "https://registry-1.docker.io"
    username: null  # Optional
    password: null  # Optional
    timeout_seconds: 60
    insecure: false

  notification:
    enabled: false
    channels:
      - name: "slack-alerts"
        channel_type: "slack"
        config:
          webhook_url: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
        events:
          - "pipeline_failed"
          - "pipeline_completed"
      
      - name: "email-notifications"
        channel_type: "email"
        config:
          smtp_server: "smtp.gmail.com"
          smtp_port: "587"
          username: "your-email@gmail.com"
          password: "your-app-password"
          from_address: "rustci@yourcompany.com"
        events:
          - "pipeline_failed"

features:
  enable_audit_logging: true
  enable_metrics_collection: true
  enable_distributed_tracing: false
  enable_hot_reload: true
  enable_experimental_features: false
  
  custom_flags:
    enable_pipeline_caching: true
    enable_advanced_scheduling: false
    enable_multi_tenant: false

# Environment-specific overrides
# These can be set via environment variables:
# 
# SERVER_HOST=0.0.0.0
# PORT=8000
# MONGODB_URI=mongodb://localhost:27017
# MONGODB_DATABASE=rustci
# JWT_SECRET=your-secret-key
# GITHUB_OAUTH_CLIENT_ID=your-client-id
# GITHUB_OAUTH_CLIENT_SECRET=your-client-secret
# ENCRYPTION_KEY=base64-encoded-key
# LOG_LEVEL=info
# ENVIRONMENT=development  # development, staging, production