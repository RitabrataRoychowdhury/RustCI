# HAProxy Configuration for RustCI Protocol Load Balancing
# This configuration provides high-performance load balancing for RustCI Protocol

global
    # Process management
    daemon
    user haproxy
    group haproxy
    
    # Performance tuning
    maxconn 100000
    nbproc 1
    nbthread 4
    
    # SSL/TLS configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    ssl-default-server-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets
    
    # Logging
    log stdout local0 info
    
    # Stats socket
    stats socket /var/run/haproxy.sock mode 600 level admin
    stats timeout 2m

defaults
    # Mode and options
    mode http
    option httplog
    option dontlognull
    option log-health-checks
    option redispatch
    
    # Timeouts
    timeout connect 5s
    timeout client 30s
    timeout server 30s
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 5s
    
    # Retries and connection limits
    retries 3
    maxconn 10000
    
    # Error handling
    errorfile 400 /usr/local/etc/haproxy/errors/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/403.http
    errorfile 408 /usr/local/etc/haproxy/errors/408.http
    errorfile 500 /usr/local/etc/haproxy/errors/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/504.http

# Frontend for HTTP traffic
frontend rustci_http
    bind *:80
    
    # Redirect HTTP to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }

# Frontend for HTTPS traffic
frontend rustci_https
    bind *:443 ssl crt /etc/ssl/certs/tls.crt
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Frame-Options "DENY"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Health check endpoint
    acl is_health_check path_beg /health
    use_backend rustci_health if is_health_check
    
    # Metrics endpoint
    acl is_metrics path_beg /metrics
    use_backend rustci_metrics if is_metrics
    
    # WebSocket upgrade
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_websocket_path path_beg /ws
    use_backend rustci_websocket if is_websocket is_websocket_path
    
    # API endpoints
    acl is_api path_beg /api
    use_backend rustci_api if is_api
    
    # Default backend
    default_backend rustci_protocol

# Backend for RustCI Protocol servers
backend rustci_protocol
    # Load balancing algorithm
    balance roundrobin
    
    # Health check
    option httpchk GET /health/ready
    http-check expect status 200
    
    # Server options
    option tcp-check
    option log-health-checks
    
    # Servers
    server rustci-1 rustci-server:8080 check inter 10s rise 2 fall 3 weight 100
    # Add more servers for high availability:
    # server rustci-2 rustci-server-2:8080 check inter 10s rise 2 fall 3 weight 100
    # server rustci-3 rustci-server-3:8080 check inter 10s rise 2 fall 3 weight 100

# Backend for health checks
backend rustci_health
    balance roundrobin
    option httpchk GET /health/ready
    http-check expect status 200
    server rustci-1 rustci-server:8081 check inter 5s rise 2 fall 2

# Backend for metrics
backend rustci_metrics
    balance roundrobin
    option httpchk GET /metrics
    http-check expect status 200
    server rustci-1 rustci-server:9090 check inter 30s rise 2 fall 2

# Backend for WebSocket connections
backend rustci_websocket
    balance source
    option tcp-check
    server rustci-1 rustci-server:8080 check inter 10s rise 2 fall 3

# Backend for API endpoints
backend rustci_api
    balance roundrobin
    option httpchk GET /health/ready
    http-check expect status 200
    
    # API-specific timeouts
    timeout server 60s
    timeout connect 10s
    
    server rustci-1 rustci-server:8080 check inter 10s rise 2 fall 3

# Statistics interface
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats show-legends
    stats show-desc "RustCI Communication Protocol Load Balancer"
    
    # Authentication (change in production)
    stats auth admin:admin
    
    # Hide version for security
    stats hide-version